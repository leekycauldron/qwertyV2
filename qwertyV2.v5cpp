{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       Joe                                                       */\n/*    Created:      2069-04-20                                                */\n/*    Description:  QWERTY has been revived!                                  */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n#include <cmath>\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n//This is for the controller\ncontroller myController = controller();\n\n\n\nclass Tank {\n\n  vex::motor frontLeftMotor(vex::PORT5, vex::gearSetting::ratio18_1, false);\n  vex::motor frontRightMotor(vex::PORT6, vex::gearSetting::ratio18_1, false);\n  vex::motor backLeftMotor(vex::PORT15, vex::gearSetting::ratio18_1, false);\n  vex::motor backRightMotor(vex::PORT16, vex::gearSetting::ratio18_1, false);\n  \n  public:\n\n    void forwardMove(double vel) { //Why is this highlighted???\n      frontLeftMotor.spin(vex::directionType::fwd,vel,vex::velocityUnits::pct);\n      frontRightMotor.spin(vex::directionType::fwd,vel,vex::velocityUnits::pct);\n      backLeftMotor.spin(vex::directionType::fwd,vel,vex::velocityUnits::pct); //TODO: Fix gear for back left motor\n      backRightMotor.spin(vex::directionType::fwd,vel,vex::velocityUnits::pct);\n    }\n\n    void backwardMove(double vel) {\n      frontLeftMotor.spin(vex::directionType::rev,vel,vex::velocityUnits::pct);\n      frontRightMotor.spin(vex::directionType::rev,vel,vex::velocityUnits::pct);\n      backLeftMotor.spin(vex::directionType::rev,vel,vex::velocityUnits::pct);\n      backRightMotor.spin(vex::directionType::rev,vel,vex::velocityUnits::pct);\n    }\n\n    void rightTurn(double vel) {\n      frontLeftMotor.spin(vex::directionType::fwd,vel,vex::velocityUnits::pct);\n      frontRightMotor.spin(vex::directionType::rev,vel,vex::velocityUnits::pct);\n    }\n\n    void leftTurn(double vel) {\n      frontLeftMotor.spin(vex::directionType::rev,vel,vex::velocityUnits::pct);\n      frontRightMotor.spin(vex::directionType::fwd,vel,vex::velocityUnits::pct);\n    }\n\n    void stop() {\n      frontLeftMotor.stop();\n      frontRightMotor.stop();\n      backLeftMotor.stop();\n      backRightMotor.stop();\n    }\n    \n};\n// General Funcitons\nvoid ResetScreen()\n{\n    Brain.Screen.clearScreen();\n    Brain.Screen.setCursor(1, 1);\n}\n\n// Initialize Main Funcs\nvoid autonomous();\nvoid userControl();\n\nint main() {\n    // Initial Robot Stuff\n    autonomous();\n    ResetScreen();\n\n    // User Control Mode\n    \n    userControl();\n}\n\nvoid autonomous(){\n  Brain.Screen.setFillColor(red);\n  Brain.Screen.setPenColor(black);\n  Brain.Screen.drawRectangle(20,6,440,260);\n  Brain.Screen.setCursor(21,7);\n  Brain.Screen.print(\"QWERTY!!1111!\");\n}\n\nvoid speedChange(double velToChange,double *vel) { // Function that makes sure speed increases not above 50 or below 1.\n  if(velToChange > 0) {\n    if (*vel + velToChange <= 50) {\n      *vel += velToChange;\n    }\n  } else if(velToChange < 0) {\n    if (*vel - velToChange >= 1) {\n      *vel -= std::abs(velToChange);\n    }\n  }\n}\n\nvoid userControl() {\n  class Tank thomas;\n  double moveVel = 25; // Min 1, Max 50. // TODO: ADD AXIS 3 for move vel\n  double turnVel = 25; // Min 1, Max 50. // TODO: ADD AXIS 4 for turn vel\n  while (true) {\n    ResetScreen();\n\n    Brain.Screen.print(\"Move Velocity: %.2f\",moveVel);\n    Brain.Screen.newLine();\n    Brain.Screen.print(\"Turn Velocity: %.2f\",turnVel);\n\n\n\n    // Binary Conditions\n    if (myController.ButtonR2.pressing()) thomas.forwardMove(moveVel);\n    else if (myController.ButtonL2.pressing()) thomas.backwardMove(moveVel);\n    else if (myController.ButtonR1.pressing()) thomas.rightTurn(turnVel);\n    else if (myController.ButtonL1.pressing()) thomas.leftTurn(turnVel);\n    else thomas.stop();\n\n\n    // Value Conditions\n    if (myController.Axis3.position() != 0) {\n      speedChange(myController.Axis3.position()/2,&moveVel);\n    } \n    if (myController.Axis4.position() != 0) {\n      speedChange(myController.Axis4.position()/2,&turnVel);\n    }\n\n\n    vex::task::sleep(20);\n    wait(20,msec);\n  }\n}","textLanguage":"cpp","rconfig":[],"slot":0,"platform":"V5","sdkVersion":"20211013.15.00.00","appVersion":"2.2.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}